/** @file sys_main.c
*   @brief Application main file
*   @date 15.Aug.2012
*   @version 03.02.00
*
*   This file contains an empty main function,
*   which can be used for the application.
*/

/* (c) Texas Instruments 2009-2012, All rights reserved. */

/* USER CODE BEGIN (0) */

/* Standard includes */
#include <stdio.h>

/* Kernel includes */
#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"
#include "semphr.h"
#include "queue.h"

/* Library includes */
#include "het.h"
#include "sci.h"
//#include "adc.h"

#include <tesla/drivers/can.h>
#include <can_gen.h>
#include <gio.h>
#include <interrupt.h>

/*#define mainCREATE_SIMPLE_BLINKY_DEMO_ONLY	0*/

#define SCI_BAUD_RATE	9600

/* USER CODE END */

/* Include Files */

#include "sys_common.h"
#include "system.h"

/* USER CODE BEGIN (1) */

/* Port bits connected to LEDs */

const unsigned long ulLEDBits[] = { 	17, 31, 0,   /* Top row */
					25, 18, 29,  /* Bottom row */
					27, 	     /* Left */
					05	     /* Right */
					};

const unsigned int uiTimeDelays[] = { 10, 25, 50 };

void vTask1( void *pvParameters )
{
	unsigned long ulCounter = 0UL;
	unsigned int toggle = 0x00;
	static unsigned int taskNumber = 0;
	unsigned long ledBit = ulLEDBits[taskNumber];
	unsigned int timeDelay = uiTimeDelays[taskNumber];

	taskNumber++;

	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();

	for( ;; )
	{
		vTaskDelayUntil(&xLastWakeTime, (timeDelay / portTICK_RATE_MS));

		ulCounter++;
		toggle ^= 0x01;
		if (toggle)
		{
			gioSetBit(hetPORT1, ledBit, 1);
		}
		else
		{
			gioSetBit(hetPORT1, ledBit, 0);
		}
	}

}

/************** CAN Example Task: ***************/

#define ASCII_OFFSET	0x30U
#define CAN_D_SIZE	6

xSemaphoreHandle xCANBinarySemaphore = NULL;

static CAN_HANDLE can_1_handle = NULL;
static CAN_HANDLE can_2_handle = NULL;

uint8_t rx_data1[CAN_D_SIZE + 3] = {0};
uint8_t rx_data2[CAN_D_SIZE + 3] = {0};
uint8_t rx_data3[CAN_D_SIZE + 3] = {0};

uint8_t *rx_data1_ptr = rx_data1;
uint8_t *rx_data2_ptr = rx_data2;
uint8_t *rx_data3_ptr = rx_data3;

extern uint32_t canMsgReceived;

static void vCANHandlerTask ( void *pvParameters )
{
	static unsigned long ulCounter = 0UL;
	static unsigned long toggle = 0x0;
	unsigned int valid = 0;
	/*valid = canIsMessageBoxValid(canREG1, canMESSAGE_BOX1);*/
	/*valid = canIsMessageBoxValid(canREG2, canMESSAGE_BOX4);*/

	/*xSemaphoreTake( xCANBinarySemaphore, portMAX_DELAY );*/

	for(;;)
	{
		xSemaphoreTake( xCANBinarySemaphore, portMAX_DELAY );

		ulCounter++;

		toggle ^= 0x01;
		if (toggle)
		{
			gioSetBit(hetPORT1, ulLEDBits[5], 1);
		}
		else
		{
			gioSetBit(hetPORT1, ulLEDBits[5], 0);
		}

        /**
         * TODO: modify to look at message IDs or something, verify receive
         *       works
         */

		/*if(canMsgReceived & (1 << (canMESSAGE_BOX4 - 1)))*/
		/*{*/
			/*[>sciSend(scilinREG, (CAN_D_SIZE + 3), rx_data1);<]*/
			/*canMsgReceived &= ~((1 << (canMESSAGE_BOX4 - 1)));*/
		/*}*/
		/*if(canMsgReceived & (1 << (canMESSAGE_BOX5 - 1)))*/
		/*{*/
			/*[>sciSend(scilinREG, (CAN_D_SIZE + 3), rx_data2);<]*/
			/*canMsgReceived &= ~((1 << (canMESSAGE_BOX5 - 1)));*/
		/*}*/
		/*if(canMsgReceived & (1 << (canMESSAGE_BOX6 - 1)))*/
		/*{*/
			/*[>sciSend(scilinREG, (CAN_D_SIZE + 3), rx_data3);<]*/
			/*canMsgReceived &= ~((1 << (canMESSAGE_BOX6 - 1)));*/
		/*}*/

			/*sciSend(scilinREG, 1, (unsigned char *)"\t");*/
	}
}

/*uint8_t tx_data1[9] = {'H','E','R','C','U','L','E','S','\0'};*/
uint8_t tx_data1[CAN_D_SIZE] = {'T','A','S','K','1','\0'};
uint8_t tx_data2[CAN_D_SIZE] = {'T','A','S','K','2','\0'};
uint8_t tx_data3[CAN_D_SIZE] = {'T','A','S','K','3','\0'};

void vTask2( void *pvParameters )
{
	unsigned long ulCounter = 0UL;

	unsigned int toggle = 0x00;
	static unsigned int taskCounter = 0;
	unsigned long ledBit = ulLEDBits[taskCounter];
	unsigned int timeDelay = uiTimeDelays[taskCounter];
	uint32_t taskNumber = 0;
	uint32_t canMessageBox;

	taskCounter++;

	taskNumber = taskCounter;
	/*canMessageBox = taskCounter;*/
    canMessageBox = 1;

	portTickType xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();

	for( ;; )
	{
		vTaskDelayUntil(&xLastWakeTime, (timeDelay / portTICK_RATE_MS));

		ulCounter++;
		toggle ^= 0x01;
		if (toggle)
		{
			gioSetBit(hetPORT1, ledBit, 1);
		}
		else
		{
			gioSetBit(hetPORT1, ledBit, 0);
		}

		canTransmit(canREG1, canMessageBox, ((taskNumber == 1) ? tx_data1 : (taskNumber == 2) ? tx_data2 : tx_data3));
		/*canTransmit(canREG1, ((taskNumber == 1) ? canMESSAGE_BOX3 : (taskNumber == 2) ? canMESSAGE_BOX2 : canMESSAGE_BOX1), ((taskNumber == 1) ? tx_data1 : (taskNumber == 2) ? tx_data2 : tx_data3));*/

#if 0
		while(!canIsRxMessageArrived(canREG2, canMESSAGE_BOX4));
		canGetData(canREG2, canMESSAGE_BOX4, rx_data1);

		sciSend(scilinREG, CAN_D_SIZE, rx_data1);
#endif
	}


}


/************************************************/

/* USER CODE END */

/** @fn void main(void)
*   @brief Application main function
*   @note This function is empty by default.
*
*   This function is called after startup.
*   The user can use this function to implement the application.
*/

/* USER CODE BEGIN (2) */
/* USER CODE END */

void main(void)
{
	/*
	 * Testing area!
	 */

	int returnval = 0;
	irq_functionPTR_t test_handler = 0;

/* USER CODE BEGIN (3) */

	hetInit();

    /* Open two CAN devices */
    returnval = can_open(&can_1_handle, 1); // should technically be inside
                                           // messaging task
    returnval = can_open(&can_2_handle, 2);

    /*canInit();*/

    // Test for busy return
    returnval = can_open(&can_1_handle, 1);

	sciInit(SCI_BAUD_RATE);
	gioInit();

	returnval = irq_set_handler(IRQ_CH_CAN_2_HIGH, &can2HighLevelInterrupt);
	returnval = irq_set_handler(IRQ_CH_CAN_1_HIGH, &can1HighLevelInterrupt);

	returnval = irq_enable(IRQ_CH_CAN_1_HIGH);
	returnval = irq_enable(IRQ_CH_CAN_2_HIGH);

	_enable_IRQ();

	vSemaphoreCreateBinary( xCANBinarySemaphore );

	if(xTaskCreate( vTask2, "Task 1", configMINIMAL_STACK_SIZE, NULL, 1, NULL ) != pdTRUE)
	{
		/* Task could not be created */
		while (1);
	}
	if(xTaskCreate( vTask2, "Task 2", configMINIMAL_STACK_SIZE, NULL, 2, NULL ) != pdTRUE)
	{
		/* Task could not be created */
		while (1);
	}
	if(xTaskCreate( vTask2, "Task 3", configMINIMAL_STACK_SIZE, NULL, 3, NULL ) != pdTRUE)
	{
		/* Task could not be created */
		while (1);
	}
	if(xTaskCreate( vCANHandlerTask, "CAN Handler Task", 240, NULL, 4, NULL ) != pdTRUE)
	{
		/* Task could not be created */
		while (1);
	}

	vTaskStartScheduler();


	/* Must Never reach here! */
	while(1);




	/* Example from Forum: non-compilable, for reference only!*/
#if 0
	/* Setup the microcontroller hardware for the demo. */
	        prvSetupHardware();

	        /* Create the common demo application tasks, for example: */
	        vCreateFlashTasks();
	        vCreatePollQTasks();
	        vCreateComTestTasks();
	        //Etc.

	        /* Create any tasks defined within main.c itself, or otherwise specific to the
	        demo being built. */
	        xTaskCreate( vCheckTask, "check", STACK_SIZE, NULL, TASK_PRIORITY, NULL );
	        //Etc.

	        /* Start the scheduler, this function should not return as it causes the execution
	        context to change from main() to one of the created tasks. */
	        vTaskStartScheduler();

	        /* Should never get here! */
#endif

/* USER CODE END */
}

/* USER CODE BEGIN (4) */

/*-----------------------------------------------------------*/
void vApplicationMallocFailedHook( void )
{
	/* vApplicationMallocFailedHook() will only be called if
	configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a hook
	function that will get called if a call to pvPortMalloc() fails.
	pvPortMalloc() is called internally by the kernel whenever a task, queue,
	timer or semaphore is created.  It is also called by various parts of the
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; ) { }
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
	/* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
	to 1 in FreeRTOSConfig.h.  It will be called on each iteration of the idle
	task.  It is essential that code added to this hook function never attempts
	to block in any way (for example, call xQueueReceive() with a block time
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; ) { }
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
	/* This function will be called by each tick interrupt if
	configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h.  User code can be
	added here, but the tick hook is called from an interrupt context, so
	code must not attempt to block, and only the interrupt safe FreeRTOS API
	functions can be used (those that end in FromISR()). */
}
/*-----------------------------------------------------------*/

/* USER CODE END */
