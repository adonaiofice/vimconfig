/** @file notification.c
*   @brief User Notification Definition File
*   @date 15.Jun.2012
*   @version 03.01.02
*
*   This file  defines  empty  notification  routines to avoid
*   linker errors, Driver expects user to define the notification.
*   The user needs to either remove this file and use their custom
*   notification function or place their code sequence in this file
*   between the provided USER CODE BEGIN and USER CODE END.
*
*/

/* Include Files */

#include "esm.h"
#include "sys_selftest.h"
#include <can_gen.h>
#include "gio.h"
#include "mibspi.h"
#include "sci.h"
/*#include "spi.h"*/
#include "het.h"
/* USER CODE BEGIN (0) */

#include "FreeRTOS.h"
#include "task.h"
#include "timers.h"
#include "semphr.h"
#include "queue.h"

#include "gio.h"

#include <stdint.h>
#include <hal_stdtypes.h>

/* USER CODE END */

void esmGroup1Notification(uint32_t channel)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (1) */
/* USER CODE END */
}

/* USER CODE BEGIN (2) */
/* USER CODE END */

void esmGroup2Notification(uint32_t channel)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (3) */
/* USER CODE END */
}

/* USER CODE BEGIN (4) */
/* USER CODE END */

void memoryPort0TestFailNotification(uint32_t groupSelect, uint32_t dataSelect, uint32_t address, uint32_t data)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (5) */
/* USER CODE END */
}

/* USER CODE BEGIN (6) */
/* USER CODE END */

void memoryPort1TestFailNotification(uint32_t groupSelect, uint32_t dataSelect, uint32_t address, uint32_t data)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (7) */
/* USER CODE END */
}

/* USER CODE BEGIN (8) */
/* USER CODE END */
void canErrorNotification(canBASE_t *node, uint32_t notification)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (13) */
	uint32_t errors = node->ES;
	/*portYIELD_FROM_ISR();*/
/* USER CODE END */
}

/* USER CODE BEGIN (14) */

uint32_t canMsgReceived = 0;

extern xSemaphoreHandle xCANBinarySemaphore;

extern uint8_t *rx_data1_ptr;
extern uint8_t *rx_data2_ptr;
extern uint8_t *rx_data3_ptr;

/* USER CODE END */

void canMessageNotification(canBASE_t *node, uint32_t messageBox)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (15) */


	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;

	if (node == canREG1)
	{
		if (messageBox == 1)
		{
			gioToggleBit(gioPORTA, 0);
		}
		else if (messageBox == 2)
		{
			gioToggleBit(gioPORTA, 1);
		}
		else if (messageBox == 3)
		{
			gioToggleBit(gioPORTA, 2);
		}
	}

	else if (node == canREG2)
	{
        unsigned int id = (canREG2->IF1ARB & 0x1FFF0000)>>18U;
		if (messageBox == 4)
		{
			if(canGetData(canREG2, canMESSAGE_BOX4, rx_data1_ptr) == 1)
			{
				xSemaphoreGiveFromISR(xCANBinarySemaphore, &xHigherPriorityTaskWoken);
				canMsgReceived |= 1 << (messageBox - 1);
			}
		}
		else if (messageBox == 5)
		{
			if(canGetData(canREG2, canMESSAGE_BOX5, rx_data2_ptr) == 1)
			{
				xSemaphoreGiveFromISR(xCANBinarySemaphore, &xHigherPriorityTaskWoken);
				canMsgReceived |= 1 << (messageBox - 1);
			}
		}
		else if (messageBox == 6)
		{
			if(canGetData(canREG2, canMESSAGE_BOX6, rx_data3_ptr) == 1)
			{
				xSemaphoreGiveFromISR(xCANBinarySemaphore, &xHigherPriorityTaskWoken);
				canMsgReceived |= 1 << (messageBox - 1);
			}
		}
	}
//	if(xHigherPriorityTaskWoken != pdFALSE)
//	{
//		portYIELD_FROM_ISR();
//	}
	return;

	/* USER CODE END */
}

/* USER CODE BEGIN (16) */
/* USER CODE END */
void gioNotification(uint32_t bit)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (19) */
/* USER CODE END */
}

/* USER CODE BEGIN (20) */
/* USER CODE END */
void mibspiNotification(mibspiBASE_t *mibspi, uint32_t flags)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (25) */
/* USER CODE END */
}

/* USER CODE BEGIN (26) */
/* USER CODE END */

void mibspiGroupNotification(mibspiBASE_t *mibspi, uint32_t group)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (27) */
/* USER CODE END */
}
/* USER CODE BEGIN (28) */
/* USER CODE END */

void sciNotification(sciBASE_t *sci, uint32_t flags)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (29) */
/* USER CODE END */
}

/* USER CODE BEGIN (30) */
/* USER CODE END */
/*void spiNotification(spiBASE_t *spi, uint32_t flags)*/
/*{*/
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (31) */
/* USER CODE END */
/*}*/

/* USER CODE BEGIN (32) */
/* USER CODE END */

/*void spiEndNotification(spiBASE_t *spi)*/
/*{*/
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (33) */
/* USER CODE END */
/*}*/

/* USER CODE BEGIN (34) */
/* USER CODE END */

void pwmNotification(hetBASE_t * hetREG,uint32_t pwm, uint32_t notification)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (35) */
/* USER CODE END */
}

/* USER CODE BEGIN (36) */
/* USER CODE END */

void edgeNotification(hetBASE_t * hetREG,uint32_t edge)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (37) */
/* USER CODE END */
}

/* USER CODE BEGIN (38) */
/* USER CODE END */

void hetNotification(hetBASE_t *het, uint32_t offset)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
/* USER CODE BEGIN (39) */
/* USER CODE END */
}

/* USER CODE BEGIN (40) */
/* USER CODE END */


/* USER CODE BEGIN (43) */
/* USER CODE END */


/* USER CODE BEGIN (47) */
/* USER CODE END */


/* USER CODE BEGIN (50) */
/* USER CODE END */


/* USER CODE BEGIN (53) */
/* USER CODE END */
