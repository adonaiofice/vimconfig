#include <drivers/can.h>
#include <stdint.h>
#include <error.h>
#include <reg_can.h>
#include <sys_common.h>

static const canBASE_t* can_device_ptr[CAN_NUMBER_OF_PORTS] = {canREG1, canREG2, canREG3};
static can_config_t can_configurations[CAN_NUMBER_OF_PORTS];

/* Defines */
#define CAN_RESET   0x00000001U

/* Static Methods: */
static CAN_HANDLE can_map_id_to_handle(uint32_t peripheral_id);
static canBASE_t* can_handle_to_reg(CAN_HANDLE h);

/**
 * @fn static canBASE_t *can_map_id_to_reg(uint32_t peripheral_id)
 *
 * @brief Map peripheral ID to CAN device
 *
 * @return encoded CAN_HANDLE, else CAN_HANDLE = 0 if invalid parameter
 *
 */
static CAN_HANDLE can_map_id_to_handle(uint32_t peripheral_id)
{
    CAN_HANDLE ret;
    switch(peripheral_id)
    {
        case 1:
            ret.handle = 0x01U;
            break;
        case 2:
            ret.handle = 0x02U;
            break;
        case 3:
            ret.handle = 0x03U;
            break;
        default:
            ret.handle = 0;
            break;
    }

    return ret;
}

/**
 * @fn static canBASE_t *can_handle_to_reg(CAN_HANDLE h)
 *
 * @brief Map handle to associated canREG
 *
 * @return pointer to appropriate CAN register
 */

static canBASE_t* can_handle_to_reg(CAN_HANDLE h)
{
    canBASE_t* ret;

    if(h.handle > 0 && h.handle <= CAN_NUMBER_OF_PORTS)
    {
        ret = (canBASE_t *)can_device_ptr[h.handle - 1];
    }
    else
    {
        ret = NULL;
    }

    return ret;
}



int can_open (CAN_HANDLE *h, uint32_t peripheral_id)
{
    canBASE_t *can_reg;
    /* Check for valid CAN ID */
    *h = can_map_id_to_handle(peripheral_id);

    if(h->handle == 0)
    {
        return -EDEV_ID;
    }

    can_reg = (canBASE_t *)can_device_ptr[h->handle - 1];

    /* Check if device is already operating */
    if(!(can_reg->CTL & CAN_RESET))
    {
        h->handle = 0;
        return -EBUSY;
    }

    /* Initialize the peripheral with default settings */
    can_set_config(*h, NULL);

    return SUCCESS;
}

int can_set_config(CAN_HANDLE h, const can_config_t* options)
{
    canBASE_t* can_reg = can_handle_to_reg(h);

    if (can_reg == NULL)
    {
        return -EINV_HANDLE;
    }

    /** Init Mode */
    can_reg->CTL = CAN_RESET;

    {
        uint32_t baudrate;
        uint8_t id_extension;
        uint8_t ram_parity_enable;
        can_rx_ISR_t rx_callback_fn;
        can_tx_ISR_t tx_callback_fn;

        if (options == NULL)
        {
            /** Set default options */
            baudrate = 500;
            id_extension = CAN_ID_LENGTH_STANDARD;
            ram_parity_enable = CAN_RAM_PARITY_DISABLE;
            rx_callback_fn = NULL;
            tx_callback_fn = NULL;
        }
        else
        {
            baudrate = options->baudrate;
            id_extension = (options->id_extension != 0U);
            ram_parity_enable = (options->ram_parity_enable != 0U);
            rx_callback_fn = options->can_message_rx_ISR;
            tx_callback_fn = options->can_message_tx_complete;
        }


    can_reg->CTL = (1U << 25U) /** Wake up on bus activity when in sleep */
                 | (1U << 17U) /** Enable low-level interrupts */
                 | ((ram_parity_enable ? 0xAU : 0x5U) << 10U)
                 | (1U << 6U) /** Allow access to BTR reg */
                 | (1U << 1U) /** Enable high-level interrupts */
                 | (1U); /** Initialization mode */

    /** - Clear all pending error flags and reset current status */
    can_reg->ES = can_reg->ES;

    /** Set default configurations: */

    /*if()*/

    }
    return 0;
}


/**
 * Return highest priority interrupt number that has triggered IRQ
 */
uint32_t get_irq_number()
{
    // Put this in VIM
    return 0;
}


/**
 * Interrupt handler:
 *
 * - check functions for NULL, don't call
 * Transmit (mBox 1) - function callback
 * Receive (mBox 2) -
 *  1. Get ID, length + data pointer (pointer to IFDATA register)
 *  function callback - function responsible for handling the received data
 *  and putting into appropriate message format
 *
 */



static void can_message_isr(void)
{
    // Read from VIM which CAN peripheral fired
    // msg byte order messed up, read message & arrange properly
    // access proper can configurations and function callbacks
}


